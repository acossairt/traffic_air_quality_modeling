#  ---------------------------------------------
# | Toy model - 06/03/2024 - updated 10/21/2024 |
#  ---------------------------------------------
# Population dynamics of two patches: p1 (home) and p2 (work) with one connecting 
# corridor c1. Each corridor has two lanes: one heading towards p1, the other
# towards p2.
# It should always be true that p1 + p2 + c1 =1. (Population is conserved)
# Populations in a patch or corridor will be denoted with a capital P.
# Fluxes across patches and corridors will be denoted with a captial F.


#  ----------------
# | Variable names |
#  ----------------
# P_p1      :  population in patch 1
# P_p2      :  population in patch 2
# P_c1__p1p2 : population in corridor 1 in the lane traveling from p1 to p2
# P_c1__p2p1 : population in corridor 1 in the lane traveling from p2 to p1
# F__p1_c1   : flow from patch 1 into corridor 1 (previously F__p1_c1)
# F__p2_c1   : flow from patch 2 into corridor 1
# F__c1_p1   : flow from corridor 1 into patch 1
# F__c2_p1   : flow from corridor 2 into patch 1

#  -------------------------------
# | Parameters: Leaving functions |
#  -------------------------------

# The presence of congestion on a corridor will exponentially decrease the number of
# people who want to leave a patch and enter a corridor. This exponential decay is
# parameterized by 
# - alpha1 and alpha2 (impatience): All else held constant, a higher alpha means FEWER 
#   people in a patch will want to leave. Impatience may be different for each patch
#   (e.g. people may be willing to bear more congestion when leaving home to go to work,
#   whereas once at work, they may wait for congestion to decrease before returning home)
# - beta1 and beta2 (inverse road capacity): The capacity of the roads affects how 
#   number of cars gets translated to congestion (lower travel speeds). All else held 
#   constant, a higher beta1 means the road z1 has LOWER capacity, and so will 
#   experience MORE congestion (i.e. cars on z1 will exit into a patch more slowly).
#   Therefore, a higher beta1 means fewer people will want to leave their patch to 
#   enter z1. Same for beta2 and z2.
# - lp (stands for "leaving people"): What proportion of the total population is open 
#   to leaving at all. Anti-sociality might decrease lp. At the moment, we set lp=1.
# When beta1 = beta2, we assume the traffic is well-mixed.
# Overarching demand is given by parameters d_p1 (d for "demand") and d_p2. 
# If d_p1=1, everyone in p1 wants to leave; if d_p1=0, no one in p1 wants to leave.
# Same for d_p2 and p2.

#  -----------
# | Main ODEs |
#  -----------

P_p1' = F__c1_p1 - F__p1_c1
P_p2' = F__c1_p2 - F__p2_c1
P_c1__p1p2' = F__p1_c1 - F__c1_p2
P_c1__p2p1' = F__p2_c1 - F__c1_p1

#  ------------------
# | Helper functions |
#  ------------------
power(x,p)=if(x>0)then(x**p)else(0)

#  -------------------
# | Leaving functions |
#  -------------------

F__p1_c1 = d_p1 * exp(-(alpha1 * betac1) * P_c1__p1p2) * P_p1
F__p2_c1 = d_p2 * exp(-(alpha2 * betac1) * P_c1__p2p1) * P_p2

#  --------------------
# | Arriving functions |
#  --------------------

F__c1_p1 = exp(-betac1 * P_c1__p2p1) * power(P_c1__p2p1, lp)
F__c1_p2 = exp(-betac1 * P_c1__p1p2) * power(P_c1__p1p2, lp)

# Could also define the functions this way
#flux(a,b,impatience) = exp(-impatience*a)*b
#dx/dt = flux(z,z,beta1) - flux(z,x,alpha1)

#  --------------------
# | ICs and parameters |
#  --------------------

param N=100
init P_p1=0.96, P_p2=0, P_c1__p1p2=0.01, P_c1__p2p1=0.01
param alpha1=0.7, alpha2=0.9
param betac1=60
#param betac1p1p2=60, betac1p2p1=60, betac2p1p2=50, betac2p2p1=50
param d_p1=1,d_p2=0
param lp=0.1
param time_step=0.05
# Make sure this really aligns with dt!

# xppaut options
@ total=100, meth=stiff, dt=0.05, BOUND=1000
#meth=runge-kutta, dt=0.001
@ nplot=3
#@ xp=t, yp=x, xp2=t, yp2=y, xp3=t, yp3=P_c1__p1p2, xp4=t, yp4=P_c2__p1p2
@ xp=t, yp=P_p1, xp2=t, yp2=P_p2, xp3=t, yp3=P_c1__p1p2
@ colormap=2
@ ylo=-0.1, yhi=1.1
@ xlo=0, xhi=100

# auxiliary variables for plotting fluxes and variables (with horrible names)
# For some reason multiplying by N seems to do nothing?
aux P_p1= P_p1 * N
aux P_p2= P_p2 * N
aux c1_p1_to_p2 = P_c1__p1p2 * N
aux c1_p2_to_p1 = P_c1__p2p1 * N

# population of each transition
aux p1_to_c1 = F__p1_c1
aux p2_to_c1 = F__p2_c1
aux c1_to_p1 = F__c1_p1
aux c1_to_p2 = F__c1_p2
# total population arriving in / leaving the corridors
aux c1_in = F__p1_c1 + F__p2_c1
aux c1_out = F__c1_p1 + F__c1_p2
# totals
aux total = P_p1 + P_p2 + P_c1__p1p2 + P_c1__p2p1
done