#simple two patch test model for latest functions and debugging


#demand function. This is the logistic equation, which is smooth, continuous, and well-behaved If you pass a periodic function (like v) as the argument `x`, then f(x) will look  like a (well-behaved)  wave, peaking at the same place as where the periodic function peaks.#

f(x,r,xo,m) = m/(1 + exp(-r * (x - xo)))

#where x is the diurnal function v, r is the sharpness of the onset of demand, xâ‚€ determines the time duration of the travel interval and m determines the maximum percentage of the population in the patch that wants to travel during the travel period.

#create diurnal pattern for a day:

par period=24

#one day in minutes

u' = u * (1 - u^2 - v^2) - (2 * pi/period) * v
v' = v * (1 - u^2 - v^2) + (2 * pi/period)*u

#set initial conditions to make v the sine function

init u=1,v=0

#velocity-density relationship from the literature

g(x,a,b,c) = a*exp(-log(2)*(x/b)**c)

#where a=free flow velocity, b is the half-jam density (or number), and c is the sharpness of the jam threshold, x is density (or number).

#then entry flux = supply*demand (a sort of mass action representation - cars line up to get on the escalator (f) and they are removed at rate v*escalator (road) geometry psi (lanes)*L(road length). If Nc is the number of cars in the corridor, kc is their concentration given by kc= Nc/psi*L where psi is the number of cars that can be packed onto 1 km of highway - i.e. one lane holds 200 cars bumper to bumper at at which time v=0. kc ranges between 0 and 1.  But we can call v with numbers rather than densities (road geometry cancels).

#so total available spaces (bucket) per km, for a highway is psi. and total available per hour is psi*v.  Total actually filed depnds on demand - i.e. "cars per space".  If the demand is less than the supply, then cars per space = Nd/psi = Np*f/psi.  If Nd > psi , all spaces are full, so cars per space remains constant to the max psi V.  So a simple ramp function captures this. But I want to use a C1 (differentiable) fucntion. 

#basic ramp function - this is fine to use this.
#beta(x,a) = if(x <= a)then(x)else(a).

#But to be rigorous and reduce the chances of numerical issues, ust adjust so function
#tracks x up to point b then switches to an exponential that smoothly approaches
#a in the limit. Just for numerical issues.  Beta can be understood as the proportion
#of available buckets that are full. Once Nd>psi, that goes to 1. That is, you can't put more than one care in a "space" or bucket.

#this function is not used. Just keeping it for reference.
#beta(x,a,b) = if(x<= b)then(x)else(a - (a-b)*exp(-(x-b)/(a-b)))

par psi=100,L=30,dshrp=100,dur=0.97
par Nhj = 0.3,vff=120,vshrp=1,demhf1=3000,bgd1=0
par demhf2=500,bgd2=0

#demand going from 12. Utilization rate g()*clock on off (diurnal), f().
#notice the call variable.

#time shifts for demand
par s1=2,s2=10

#time shift fucntion
vs(s) = v*cos(2*pi*s/period) - u*sin(2*pi*s/period)

#demand
Nd12 = (1-g(N1,1,demhf1,4))*f(vs(s1),dshrp,dur,1) + bgd1
Nd21 = (1-g(N2,1,demhf2,4))*f(vs(s2),dshrp,dur,1) + bgd2

#average velocity on the corridor
Va12=g(Nc12/(psi*L),vff,Nhj,vshrp)
Va21=g(Nc21/(psi*L),vff,Nhj,vshrp)

# entry flux = demand (really a non-dimensional utilization rate*max capacity, g().
# onff = onramp free flow entry rate, cars per hour. onhj - onramp half jam.

par onff=5000, onhj=0.5,osharp=1

#entry and exit fluxes:

EnFlx12 = g(Nc12/(psi*L),onff,onhj,osharp)*Nd12
ExFlx12 = Nc12*Va12/L

EnFlx21 = g(Nc21/(psi*L),onff,onhj,osharp)*Nd21
ExFlx21 = Nc21*Va21/L

#finally the differential equations 

N1' = -EnFlx12 + ExFlx21
Nc12' = EnFlx12 - ExFlx12
Nc21' = EnFlx21 - ExFlx21
N2' = -EnFlx21 + ExFlx12

#initial conditions
init N1=10000,N2=0,Nc12=0,Nc21=0

#Auxiliary variables for debugging.
aux dmd12 = Nd12
aux dmd21 = Nd21
aux entry = EnFlx12
aux exit = ExFlx12
aux velcty12 = Va12
aux velcty21 = Va21
aux logit = f(v,dshrp,dur,1)
aux vshifted = vs(s1)
aux caltime=mod(t,24)

@ total=24, bounds=1000000

