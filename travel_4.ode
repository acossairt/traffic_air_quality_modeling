# Toy model - 06/03/2024
# Population dynamics of two patches x1 (home) and x2 (work) with two connecting 
# links z1 and z2. It should always be true that x1+x2+z1+z2=1.

# d11  : population leaving patch 1 and entering the first corridor (z1)
# d12  : population leaving patch 1 and entering the second corridor (z2)
# a11 : population leaving z1 and entering patch 1
# a21 : population leaving z2 and entering patch 1

# read subscripts as from i to j, aij = arrive from i to j,  dij = depart from i to j

#  -----------
# | Main ODEs |
#  -----------

dx1/dt = a11 + a21 - d11 - d12
dx2/dt = a12 + a22 - d21 - d22
dz1/dt = d11 + d21 - a11 - a12
dz2/dt = d12 + d22 - a21 - a22


#  -------------------
# | Leaving functions |
#  -------------------
# What determines if a person will leave their current patch and enter a road?
# At maximum, the number of people who want to leave a given patch to enter a given
# road is the population of that patch (x1 or x2) divided by the number of roads (in
# this case 2). Note that this division is important, or else you effectively have
# "clones" of each driver.
# The actual value will be less than the maximum as a function of 1) diurnal
# demand patterns and 2) congestion.
#
# Overarching demand is given by parameters p1 and p2. If p1=1, everyone in x1 
# wants to leave; if p1=0, no one in x1 wants to leave. Same for p2 and x2.
#
# The presence of congestion on a road will exponentially decrease the number of people
# who want to leave a patch and enter that road. This exponential decay is parameterized
# by 
# - alpha1 and alpha2 (impatience): All else held constant, a higher alpha means FEWER 
#   people in a patch will want to leave. Impatience may be different for each patch
#   (e.g. people may be willing to bear more congestion when leaving home to go to work,
#   whereas once at work, they may wait for congestion to decrease before returning home)
# - beta1 and beta2 (inverse road capacity): The capacity of the roads affects how 
#   number of cars gets translated to congestion (lower travel speeds). All else held 
#   constant, a higher beta1 means the road z1 has LOWER capacity, and so will 
#   experience MORE congestion (i.e. cars on z1 will exit into a patch more slowly).
#   Therefore, a higher beta1 means fewer people will want to leave their patch to 
#   enter z1. Same for beta2 and z2.
# - lp (stands for "leaving people"): What proportion of the total population is open 
#   to leaving at all. Anti-sociality might decrease lp. At the moment, we set lp=1.
# When beta1 = beta2, we assume the traffic is well-mixed. 

d11 = p1* exp(-alpha1 * z1) * x1**lp
d12 = p1* exp(-alpha2 * z2) * x1**lp
d21 = p2 * exp(-alpha1 * z1) * x2**lp
d22 = p2 * exp(-alpha2 * z2) * x2**lp


#  --------------------
# | Arriving functions |
#  --------------------
# What determines how many people exit the roads (z1 and z2) into each patch (x1 and 
# x2)?
# At maximum, the number of people who exit a road and arrive in a patch is the number
# of people in that road (z1 or z2) divided by the number of patches (in this case 2).
# The actual number declines exponentially with congestion, because congestion reduces
# speed of travel (and therefore speed of arrivals). This is governed by the
# congestion factor beta, which can be thought of as the inverse of road capacity.
# A higher beta means a smaller road, so cars will exit more slowly, because they will
# be stuck in traffic longer.
# Note that currently we do not prevent people from turning around and returning
# to their original patch.

a11 = exp(-beta1 * z1) * z1**lp
a21 = exp(-beta2 * z2) * z2**lp
a12 = exp(-beta1 * z1) * z1**lp
a22 = exp(-beta2 * z2) * z2**lp
# Marty said to raise z1 and z2 to the power lp so that exiting isn't multiplied
# by the whole population in the corridors... right? Didn't totally understand that.
# People exit when they reach their exit, right? They don't really have a choice...

# Could also define the functions this way
#flux(a,b,impatience) = exp(-impatience*a)*b
#dx1/dt = flux(z,z,beta1) - flux(z,x1,alpha1)

#  -----------
# | Challenge |
#  -----------
# I wonder why, with alpha=1, we see z2 overtake z1, even later on? I notice it's shortly after 
# x2 crosses over x1.

#  ----------
# | Scenario |
#  ----------
# Everyone starts at home and wants to go to work
# Try this with beta1 = beta2 = 0 (implying infinite road capacity), then with 0.1

# ICs and parameters
init x1=1, x2=0, z1=0, z2=0
param alpha1=1, alpha2=1, beta1=5, beta2=10
param p1=1,p2=0
param lp=1

# xppaut options
@ total=10, meth=qualst
@ nplot=4
@ xp=t, yp=x1, xp2=t, yp2=x2, xp3=t, yp3=z1, xp4=t, yp4=z2
@ colormap=2
@ ylo=-0.1, yhi=1.1
@ xlo=0, xhi=12

# auxiliary variables for plotting fluxes
# total population arriving in / leaving the patches
aux x1in = a11 + a21
aux x2in = a12 + a22
aux x1out = d11 + d12
aux x2out = d21 + d22
# total population arriving in / leaving the corridors
aux z1in = d11 + d21
aux z2in = d12 + d22
aux z1out = a11 + a12
aux z2out = a21 + a22
# population of each transition
aux x1_z1 = d11
aux x1_z2 = d12
aux x2_z1 = d21
aux x2_z2 = d22
aux z1_x1 = a11
aux z1_x2 = a12
aux z2_x1 = a21
aux z2_x2 = a22
# totals
aux total = x1 + x2 + z1 + z2

done

#
# Notes to self (Marty please ignore)
# ------------------------------------------------------------------

# Interpretation
# - All else constant, higher z (more people in corridor) means LESS people leaving patch
# - Higher x1 or x2 means MORE people leaving (though this is controlled by the power lp)
# - For arrivals, there is a tradeoff: higher z means lower coefficient (so less 
#   efficient exiting the corridor, because congestion) but also higher constant (so
#   more people exit corridor because there are more people in the corridor to begin with)
# - Setting p1or p2 to zero simulates diurnal demand patterns -- everyone wants to leave
#   home and go to work, or leave work and come home
# - All else constant, higher impatience means fewer people want to leave patch
# - All else constant, higher road_capacity means fewer people arriving at patch (because they
#   are stuck in traffic for longer)

# Scenarios
# impatience > road_capacity means corridor size can accomodate more people than want to leave
# impatience < road_capacity means more people want to leave than the corridor can accomodate

# 1) impatience = 0.1, road_capacity = 0.5 converges around 6 hours, most stuck in traffic, equal number
#    at home and at work by about 6 or 7 hours
# 2) impatience = 0.5, road_capacity = 0.1 converges around 6 hours, most at home (eventually equal
#    number at work, around 6 hours), fewer people stuck in traffic
# 3) alpha1 = 0.5, alpha2 = 0.1, road_capacity = 0.1 converges around 4 or 5 hours, most at
#    home, equal number in traffic and at work
# 4) impatience = 0.1, beta1 = 0.5, beta2 = 0.1 converges around 4 or 5 hours, least at home,
#    equal number in traffic and at work

# Add back later
# ------------------------------------------------------------------
# b1 : 0 or 1, turn "arriving" on and off to simulate congestion (?)
# arriving1 = b1*exp(-beta1*z)*z
# arriving2 = b2*exp(-beta2*z)*z
# param b1=1,b2=1d

# What would be the difference between b1 and beta1?

#
# alpha1 : impatience (all else constant, higher alpha -> fewer people want to leave)
# beta1  : travel (in)efficiency from congestion (size of corridor leaving x1 going to x2)
# lp : number of people who want to leave their patch ("leaving people")
# p1: 0 or 1, turn "leaving" on and off to simulate diurnal demand patterns
# gamma : transportation infrastructure inefficiency (state of the road; all else 
#         constant, higher inefficiency means fewer people arriving because of 
#         congestion/low capacity)

# Why am I seeing that z1in and z2in both start at 0.5? The resulting z1 and z2 curves do
# *not* jump to 0.5 after the first time step (in fact, they never do)
# Look with beta2=3 for the example I was considering
# Notice also that z1out is greater in the *beginning* but z2out remains about the same (0.1) for some while